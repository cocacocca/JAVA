public class ObjectOrientedFoundation {

    public static void main(String[] args) {
        //面向对象程序设计的特点
        //封装性：将对象的属性和方法封装起来，只需要让用户知道并使用对象提供的属性和方法，不需要知道对象的具体实现
        //采用封装的原则可以使对象以外的部分不能随意存取对象内部的数据，从而有效地避免外部错误对内部数据的影响，实现错误局部化，降低查找错误和解决错误的难度并且提高程序的可维护性
        //继承性：通过继承原有类的某些特性或全部特性而产生新的类。这时，原有的类被称为父类，产生的新类被称为子类。子类不仅可以直接继承父类的共性，而且可以创建它特有的个性。
        //多态性:指在父类中定义的属性和方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一种属性或方法在父类及其各个子类中具有不同的语义

        //类
        //类是同一种事物的统称、是用来创建对象的模板，它包含被创建对象的属性和方法的定义。
        //类的声明：需要定义类的名称，类的被访问权限，该类与其他类的关系等
        //类的声明格式如下：[修饰符] class <类名> [extends 父类名] [implements 接口列表]{ }
        //修饰符：可选参数，用于指定类的被访问权限，可选值为public、abstract和final
        //类名：必选参数，用于指定类的名称。类名必须是合法的Java标识符，在一般情况下，要求首字母大写
        //extends父类名：可选参数，用于指定要定义的类继承于哪个父类
        //implements接口列表：可选参数，用于指定该类实现的接口

        //声明成员变量
        //[修饰符] <变量类型> <变量名>
        /*public static class Apple{
        public String color;
        public static int count;
        public final boolean MATURE=true;
        public static void main(String[] args){
            System.out.println(Apple.count);
            Apple apple-new Apple();
            System.out.println(apple.color);
            System.out.println(apple.MATURE);
    }*/

        //声明局部变量
        //[final] <变量类型> <变量名>
        /*public static void grow(){
            final boolean STATE;
            int age;
        }*/

        //变量的有效范围
        //成员变量：在类中声明，在整个类中有效
        //局部变量：在方法内或方法内的复合代码块中声明的变量。在复合代码块中声明的变量，只在当前复合代码块中有效；在复合代码块外、方法内声明的变量在整个方法内都有效

        //成员方法
        //类的行为有类的成员方法来实现。类的成员方法由：方法的声明和方法体两部分构成
        //一般格式如下：
        //[修饰符] <方法返回值的类型> <方法名> {[参数列表]}

        //构造方法与对象
        //构造方法用于将对象中的所有成员变量进程初始化。对象的属性通过变量来刻画，也就是类的成员变量，而对象的行为通过方法来体现，也就是类的成员方法。方法可以通过操作属性形成一定的算法来实现一个具体的功能。类可以把属性和方法封装成一个整体。

        //对象的创建
        //对象是类的实例。Java定义任何变量都需要指定变量类型
        //对象的声明一般格式如下：
        //类名 对象名；
        //类名：必选参数，用于指定一个已经被定义的类。
        //对象名：必选参数，用于指定对象的名称。
        //Apple redApple

        //实例化对象
        //声明对象只是在内存中建立一个引用，并设置初始值为null。声明对象后，需要为对象分配内存，这个过程称为实例化对象。在Java中使用关键字new来实例化对象
        //对象名 = new 构造方法名([参数列表]);
        //对象名：必选参数，用于指定已经被声明的对象名
        //类名：必选参数，用于指定构造方法名，即类名
        //参数列表：可选参数，用于指定构造方法的入口参数。

        //对象的销毁
        //Java提供了一个finalize()的方法，用于在对象被垃圾回收机制销毁之前执行一些资源回收工作，并由垃圾回收系统调用。但是垃圾回收系统的运行是不可预测的。finalize()方法没有任何参数和返回值，每个类有且只有一个finalize()方法

        //类与程序的基本结构
        //Java应用程序由若干个类组成，在Java应用程序中有一个主类，即含有main()方法的类。

        //参数传值
    }

}
//类体
//类体主要由以下两部分组成：
//1.成员变量的定义
//2.成员方法的定义
class Apple{
    String color;   //定义颜色成员变量
    String address; //定义产地成员变量
    String price;   //定义单价成员变量
    String unit;    //定义单位成员变量
}
